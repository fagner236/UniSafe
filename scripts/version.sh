#!/bin/bash

# Script de Versionamento Autom√°tico - UniSafe
# Uso: ./scripts/version.sh [major|minor|patch] [mensagem]

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir mensagens
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    error "Execute este script no diret√≥rio raiz do projeto (UniSafe/)"
    exit 1
fi

# Verificar se o Git est√° inicializado
if [ ! -d ".git" ]; then
    error "Reposit√≥rio Git n√£o encontrado. Execute 'git init' primeiro."
    exit 1
fi

# Verificar se h√° mudan√ßas n√£o commitadas
if [ -n "$(git status --porcelain)" ]; then
    warn "H√° mudan√ßas n√£o commitadas. Commitando automaticamente..."
    git add .
    git commit -m "Auto-commit antes do versionamento"
fi

# Obter vers√£o atual
CURRENT_VERSION=$(node -p "require('./package.json').version")
log "Vers√£o atual: $CURRENT_VERSION"

# Determinar tipo de vers√£o
if [ -z "$1" ]; then
    echo -e "${BLUE}Tipos de vers√£o dispon√≠veis:${NC}"
    echo "  patch - Corre√ß√µes de bugs (1.0.0 ‚Üí 1.0.1)"
    echo "  minor - Novas funcionalidades (1.0.0 ‚Üí 1.1.0)"
    echo "  major - Mudan√ßas incompat√≠veis (1.0.0 ‚Üí 2.0.0)"
    echo ""
    read -p "Escolha o tipo de vers√£o: " VERSION_TYPE
else
    VERSION_TYPE=$1
fi

# Validar tipo de vers√£o
if [[ ! "$VERSION_TYPE" =~ ^(major|minor|patch)$ ]]; then
    error "Tipo de vers√£o inv√°lido. Use: major, minor ou patch"
    exit 1
fi

# Obter mensagem de release
if [ -z "$2" ]; then
    read -p "Mensagem do release: " RELEASE_MESSAGE
else
    RELEASE_MESSAGE=$2
fi

# Incrementar vers√£o
log "Incrementando vers√£o $VERSION_TYPE..."
NEW_VERSION=$(npm version $VERSION_TYPE --no-git-tag-version)
NEW_VERSION=${NEW_VERSION:1} # Remove o 'v' do in√≠cio
log "Nova vers√£o: $NEW_VERSION"

# Atualizar vers√£o nos arquivos de documenta√ß√£o
log "Atualizando documenta√ß√£o..."

# Atualizar DOCUMENTACAO_DESENVOLVIMENTO.md
sed -i '' "s/^Vers√£o do Sistema.*$/Vers√£o do Sistema: \`$NEW_VERSION\`/" DOCUMENTACAO_DESENVOLVIMENTO.md
sed -i '' "s/^√öltima Atualiza√ß√£o.*$/√öltima Atualiza√ß√£o: \`$(date +%d\/%m\/%Y)\`/" DOCUMENTACAO_DESENVOLVIMENTO.md

# Atualizar CHECKPOINT_ESTADO_ATUAL.md
sed -i '' "s/^Vers√£o.*$/Vers√£o: \`$NEW_VERSION\`/" CHECKPOINT_ESTADO_ATUAL.md
sed -i '' "s/^Data.*$/Data: \`$(date +%d\/%m\/%Y)\`/" CHECKPOINT_ESTADO_ATUAL.md

# Atualizar README.md
sed -i '' "s/^Vers√£o.*$/Vers√£o: \`$NEW_VERSION\`/" README.md
sed -i '' "s/^√öltima Atualiza√ß√£o.*$/√öltima Atualiza√ß√£o: \`$(date +%d\/%m\/%Y)\`/" README.md

# Atualizar CHANGELOG.md
TODAY=$(date +%Y-%m-%d)
sed -i '' "s/^## \[Unreleased\]/## \[$NEW_VERSION\] - $TODAY\n\n### Adicionado\n- $RELEASE_MESSAGE\n\n## [Unreleased]/" CHANGELOG.md

log "Documenta√ß√£o atualizada com sucesso!"

# Commit das mudan√ßas
log "Commitando mudan√ßas..."
git add .
git commit -m "Release v$NEW_VERSION: $RELEASE_MESSAGE"

# Criar tag Git
log "Criando tag Git v$NEW_VERSION..."
git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION: $RELEASE_MESSAGE"

# Push das mudan√ßas e tags
log "Enviando mudan√ßas para o reposit√≥rio remoto..."
git push origin main
git push origin "v$NEW_VERSION"

# Resumo final
echo ""
echo -e "${GREEN}‚úÖ Release v$NEW_VERSION criado com sucesso!${NC}"
echo ""
echo -e "${BLUE}üìã Resumo das a√ß√µes:${NC}"
echo "  ‚Ä¢ Vers√£o incrementada: $CURRENT_VERSION ‚Üí $NEW_VERSION"
echo "  ‚Ä¢ Documenta√ß√£o atualizada"
echo "  ‚Ä¢ Commit criado: Release v$NEW_VERSION: $RELEASE_MESSAGE"
echo "  ‚Ä¢ Tag Git criada: v$NEW_VERSION"
echo "  ‚Ä¢ Mudan√ßas enviadas para o reposit√≥rio remoto"
echo ""
echo -e "${BLUE}üöÄ Pr√≥ximos passos:${NC}"
echo "  ‚Ä¢ Verificar se o sistema est√° funcionando"
echo "  ‚Ä¢ Testar as novas funcionalidades"
echo "  ‚Ä¢ Atualizar documenta√ß√£o de usu√°rio se necess√°rio"
echo ""
echo -e "${GREEN}üéâ Sistema versionado com sucesso!${NC}"
