#!/bin/bash

# üöÄ SCRIPT DE ATUALIZA√á√ÉO DE VERS√ÉO UNISAFE
# Este script atualiza a vers√£o em todos os arquivos necess√°rios

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ SCRIPT DE ATUALIZA√á√ÉO DE VERS√ÉO UNISAFE${NC}"
echo "=================================================="

# Verificar se a nova vers√£o foi fornecida
if [ -z "$1" ]; then
    echo -e "${RED}‚ùå Erro: Vers√£o n√£o fornecida${NC}"
    echo "Uso: ./update-version.sh <nova_versao>"
    echo "Exemplo: ./update-version.sh 1.2.0"
    exit 1
fi

NEW_VERSION=$1
echo -e "${YELLOW}üìã Nova vers√£o: ${NEW_VERSION}${NC}"

# Fun√ß√£o para atualizar arquivo de vers√£o
update_version_file() {
    local file="frontend/src/config/version.ts"
    echo -e "${BLUE}üìù Atualizando ${file}...${NC}"
    
    # Atualizar a vers√£o no arquivo de configura√ß√£o
    sed -i '' "s/export const APP_VERSION = '.*';/export const APP_VERSION = '${NEW_VERSION}';/" "$file"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ ${file} atualizado com sucesso${NC}"
    else
        echo -e "${RED}‚ùå Erro ao atualizar ${file}${NC}"
        return 1
    fi
}

# Fun√ß√£o para atualizar package.json principal
update_main_package() {
    local file="package.json"
    echo -e "${BLUE}üìù Atualizando ${file}...${NC}"
    
    # Atualizar a vers√£o no package.json principal
    sed -i '' "s/\"version\": \".*\"/\"version\": \"${NEW_VERSION}\"/" "$file"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ ${file} atualizado com sucesso${NC}"
    else
        echo -e "${RED}‚ùå Erro ao atualizar ${file}${NC}"
        return 1
    fi
}

# Fun√ß√£o para atualizar package.json do frontend
update_frontend_package() {
    local file="frontend/package.json"
    echo -e "${BLUE}üìù Atualizando ${file}...${NC}"
    
    # Atualizar a vers√£o no package.json do frontend
    sed -i '' "s/\"version\": \".*\"/\"version\": \"${NEW_VERSION}\"/" "$file"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ ${file} atualizado com sucesso${NC}"
    else
        echo -e "${RED}‚ùå Erro ao atualizar ${file}${NC}"
        return 1
    fi
}

# Fun√ß√£o para atualizar package.json do backend
update_backend_package() {
    local file="backend/package.json"
    echo -e "${BLUE}üìù Atualizando ${file}...${NC}"
    
    # Atualizar a vers√£o no package.json do backend
    sed -i '' "s/\"version\": \".*\"/\"version\": \"${NEW_VERSION}\"/" "$file"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ ${file} atualizado com sucesso${NC}"
    else
        echo -e "${RED}‚ùå Erro ao atualizar ${file}${NC}"
        return 1
    fi
}

# Fun√ß√£o para criar tag git
create_git_tag() {
    echo -e "${BLUE}üè∑Ô∏è Criando tag Git...${NC}"
    
    # Adicionar todas as mudan√ßas
    git add .
    
    # Commit das mudan√ßas
    git commit -m "üöÄ Atualiza√ß√£o de vers√£o para ${NEW_VERSION}"
    
    # Criar tag
    git tag -a "v${NEW_VERSION}" -m "Vers√£o ${NEW_VERSION}"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Tag Git v${NEW_VERSION} criada com sucesso${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Aviso: Erro ao criar tag Git${NC}"
    fi
}

# Fun√ß√£o para mostrar resumo
show_summary() {
    echo ""
    echo -e "${GREEN}üéâ ATUALIZA√á√ÉO DE VERS√ÉO CONCLU√çDA!${NC}"
    echo "=================================================="
    echo -e "${BLUE}üìã Nova vers√£o: ${NEW_VERSION}${NC}"
    echo -e "${BLUE}üìÅ Arquivos atualizados:${NC}"
    echo "  - frontend/src/config/version.ts"
    echo "  - package.json"
    echo "  - frontend/package.json"
    echo "  - backend/package.json"
    echo ""
    echo -e "${YELLOW}üí° Pr√≥ximos passos:${NC}"
    echo "  1. Verificar se todas as altera√ß√µes est√£o corretas"
    echo "  2. Testar o sistema com a nova vers√£o"
    echo "  3. Fazer push das mudan√ßas e tags para o reposit√≥rio"
    echo "  4. Atualizar a documenta√ß√£o se necess√°rio"
    echo ""
    echo -e "${GREEN}‚úÖ Vers√£o ${NEW_VERSION} implementada com sucesso!${NC}"
}

# Executar todas as atualiza√ß√µes
echo ""
echo -e "${YELLOW}üîÑ Iniciando atualiza√ß√£o de vers√£o...${NC}"
echo ""

# Atualizar arquivos
update_version_file
update_main_package
update_frontend_package
update_backend_package

# Verificar se todas as atualiza√ß√µes foram bem-sucedidas
if [ $? -eq 0 ]; then
    echo ""
    echo -e "${GREEN}‚úÖ Todas as atualiza√ß√µes foram bem-sucedidas!${NC}"
    
    # Perguntar se deseja criar tag Git
    echo ""
    read -p "üè∑Ô∏è Deseja criar tag Git para esta vers√£o? (y/n): " -n 1 -r
    echo ""
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        create_git_tag
    else
        echo -e "${YELLOW}‚ö†Ô∏è Tag Git n√£o criada${NC}"
    fi
    
    show_summary
else
    echo -e "${RED}‚ùå Erro durante a atualiza√ß√£o de vers√£o${NC}"
    exit 1
fi
