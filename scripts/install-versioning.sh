#!/bin/bash

# Script de Instala√ß√£o do Sistema de Versionamento - UniSafe
# Uso: ./scripts/install-versioning.sh

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir mensagens
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${CYAN}‚ïë              INSTALA√á√ÉO DO SISTEMA DE VERSIONAMENTO         ‚ïë${NC}"
echo -e "${CYAN}‚ïë                           UNISAFE                          ‚ïë${NC}"
echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    error "Execute este script no diret√≥rio raiz do projeto (UniSafe/)"
    exit 1
fi

log "Iniciando instala√ß√£o do sistema de versionamento..."

# 1. Verificar se o Git est√° instalado
log "Verificando instala√ß√£o do Git..."
if ! command -v git &> /dev/null; then
    error "Git n√£o est√° instalado. Instale o Git primeiro."
    echo "  ‚Ä¢ macOS: brew install git"
    echo "  ‚Ä¢ Ubuntu/Debian: sudo apt-get install git"
    echo "  ‚Ä¢ Windows: https://git-scm.com/download/win"
    exit 1
fi
success "Git encontrado: $(git --version)"

# 2. Verificar se o Node.js est√° instalado
log "Verificando instala√ß√£o do Node.js..."
if ! command -v node &> /dev/null; then
    error "Node.js n√£o est√° instalado. Instale o Node.js primeiro."
    echo "  ‚Ä¢ macOS: brew install node"
    echo "  ‚Ä¢ Ubuntu/Debian: sudo apt-get install nodejs npm"
    echo "  ‚Ä¢ Windows: https://nodejs.org/"
    exit 1
fi
success "Node.js encontrado: $(node --version)"
success "npm encontrado: $(npm --version)"

# 3. Inicializar reposit√≥rio Git se n√£o existir
if [ ! -d ".git" ]; then
    log "Inicializando reposit√≥rio Git..."
    git init
    success "Reposit√≥rio Git inicializado"
else
    success "Reposit√≥rio Git j√° existe"
fi

# 4. Configurar usu√°rio Git se n√£o estiver configurado
if [ -z "$(git config user.name)" ]; then
    log "Configurando usu√°rio Git..."
    echo "Digite seu nome de usu√°rio para o Git:"
    read -p "Nome: " GIT_USER_NAME
    echo "Digite seu email para o Git:"
    read -p "Email: " GIT_USER_EMAIL
    
    git config user.name "$GIT_USER_NAME"
    git config user.email "$GIT_USER_EMAIL"
    success "Usu√°rio Git configurado: $GIT_USER_NAME <$GIT_USER_EMAIL>"
else
    success "Usu√°rio Git j√° configurado: $(git config user.name) <$(git config user.email)>"
fi

# 5. Tornar scripts execut√°veis
log "Configurando permiss√µes dos scripts..."
chmod +x scripts/*.sh
success "Scripts tornados execut√°veis"

# 6. Verificar se todos os arquivos necess√°rios existem
log "Verificando arquivos do sistema de versionamento..."
REQUIRED_FILES=(
    "scripts/version.sh"
    "scripts/rollback.sh"
    "scripts/version-status.sh"
    "scripts/version.config"
    "CHANGELOG.md"
    ".gitignore"
)

MISSING_FILES=()
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        MISSING_FILES+=("$file")
    fi
done

if [ ${#MISSING_FILES[@]} -eq 0 ]; then
    success "Todos os arquivos necess√°rios encontrados"
else
    error "Arquivos em falta:"
    for file in "${MISSING_FILES[@]}"; do
        echo "  ‚Ä¢ $file"
    done
    exit 1
fi

# 7. Verificar se h√° mudan√ßas n√£o commitadas
if [ -n "$(git status --porcelain)" ]; then
    warn "H√° mudan√ßas n√£o commitadas. Deseja fazer commit agora?"
    read -p "Fazer commit? (y/N): " DO_COMMIT
    
    if [[ "$DO_COMMIT" =~ ^[Yy]$ ]]; then
        log "Fazendo commit das mudan√ßas..."
        git add .
        git commit -m "Instala√ß√£o do sistema de versionamento"
        success "Mudan√ßas commitadas"
    else
        warn "Lembre-se de fazer commit das mudan√ßas antes de usar o versionamento"
    fi
else
    success "Reposit√≥rio limpo"
fi

# 8. Criar primeira vers√£o se n√£o existir
if [ -z "$(git tag)" ]; then
    log "Criando primeira vers√£o..."
    CURRENT_VERSION=$(node -p "require('./package.json').version")
    git tag -a "v$CURRENT_VERSION" -m "Release v$CURRENT_VERSION: Instala√ß√£o inicial"
    success "Primeira vers√£o criada: v$CURRENT_VERSION"
else
    success "Vers√µes j√° existem: $(git tag | tr '\n' ' ')"
fi

# 9. Testar scripts
log "Testando scripts de versionamento..."
if ./scripts/version-status.sh > /dev/null 2>&1; then
    success "Script de status funcionando"
else
    warn "Script de status pode ter problemas"
fi

# 10. Criar arquivo de configura√ß√£o do usu√°rio
log "Criando configura√ß√£o personalizada..."
cat > scripts/user.config << EOF
# Configura√ß√£o Personalizada do Usu√°rio - UniSafe
# Este arquivo pode ser editado para personalizar o comportamento

# Configura√ß√µes do usu√°rio
USER_NAME="$(git config user.name)"
USER_EMAIL="$(git config user.email)"

# Configura√ß√µes de notifica√ß√£o
SHOW_COLORS=true
SHOW_PROGRESS=true
CONFIRM_ACTIONS=true

# Configura√ß√µes de backup
CREATE_BACKUP_ON_ROLLBACK=true
BACKUP_TIMESTAMP_FORMAT="%Y%m%d-%H%M%S"

# Mensagens personalizadas
CUSTOM_PATCH_MESSAGE=""
CUSTOM_MINOR_MESSAGE=""
CUSTOM_MAJOR_MESSAGE=""
EOF

success "Configura√ß√£o personalizada criada"

# 11. Instru√ß√µes finais
echo ""
echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${CYAN}‚ïë                    INSTALA√á√ÉO CONCLU√çDA!                    ‚ïë${NC}"
echo -e "${CYan}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""
echo -e "${GREEN}üéâ Sistema de versionamento instalado com sucesso!${NC}"
echo ""
echo -e "${BLUE}üìã Comandos dispon√≠veis:${NC}"
echo "  ‚Ä¢ ${GREEN}./scripts/version-status.sh${NC} - Ver status das vers√µes"
echo "  ‚Ä¢ ${GREEN}./scripts/version.sh patch${NC} - Nova vers√£o patch (1.0.0 ‚Üí 1.0.1)"
echo "  ‚Ä¢ ${GREEN}./scripts/version.sh minor${NC} - Nova vers√£o minor (1.0.0 ‚Üí 1.1.0)"
echo "  ‚Ä¢ ${GREEN}./scripts/version.sh major${NC} - Nova vers√£o major (1.0.0 ‚Üí 2.0.0)"
echo "  ‚Ä¢ ${GREEN}./scripts/rollback.sh${NC} - Fazer rollback para vers√£o anterior"
echo ""
echo -e "${BLUE}üìö Documenta√ß√£o:${NC}"
echo "  ‚Ä¢ CHANGELOG.md - Hist√≥rico de mudan√ßas"
echo "  ‚Ä¢ scripts/version.config - Configura√ß√µes do sistema"
echo "  ‚Ä¢ scripts/user.config - Configura√ß√µes personalizadas"
echo ""
echo -e "${BLUE}üöÄ Pr√≥ximos passos:${NC}"
echo "  ‚Ä¢ Teste o sistema com: ./scripts/version-status.sh"
echo "  ‚Ä¢ Crie uma nova vers√£o: ./scripts/version.sh patch"
echo "  ‚Ä¢ Personalize as configura√ß√µes em scripts/user.config"
echo ""
echo -e "${GREEN}‚úÖ Sistema pronto para uso!${NC}"
