#!/bin/bash

# Script de Rollback - UniSafe
# Uso: ./scripts/rollback.sh [vers√£o]

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir mensagens
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    error "Execute este script no diret√≥rio raiz do projeto (UniSafe/)"
    exit 1
fi

# Verificar se o Git est√° inicializado
if [ ! -d ".git" ]; then
    error "Reposit√≥rio Git n√£o encontrado."
    exit 1
fi

# Verificar se h√° mudan√ßas n√£o commitadas
if [ -n "$(git status --porcelain)" ]; then
    warn "H√° mudan√ßas n√£o commitadas. Commitando automaticamente..."
    git add .
    git commit -m "Auto-commit antes do rollback"
fi

# Obter vers√£o atual
CURRENT_VERSION=$(node -p "require('./package.json').version")
log "Vers√£o atual: $CURRENT_VERSION"

# Obter vers√£o para rollback
if [ -z "$1" ]; then
    echo -e "${BLUE}Vers√µes dispon√≠veis:${NC}"
    git tag --sort=-version:refname | head -10
    echo ""
    read -p "Digite a vers√£o para rollback (ex: 1.0.0): " ROLLBACK_VERSION
else
    ROLLBACK_VERSION=$1
fi

# Verificar se a vers√£o existe
if ! git tag | grep -q "^$ROLLBACK_VERSION$"; then
    error "Vers√£o $ROLLBACK_VERSION n√£o encontrada!"
    echo "Vers√µes dispon√≠veis:"
    git tag --sort=-version:refname
    exit 1
fi

# Confirmar rollback
echo ""
warn "‚ö†Ô∏è  ATEN√á√ÉO: Rollback para vers√£o $ROLLBACK_VERSION"
echo "Isso ir√°:"
echo "  ‚Ä¢ Reverter o c√≥digo para a vers√£o $ROLLBACK_VERSION"
echo "  ‚Ä¢ Manter as mudan√ßas n√£o commitadas em um stash"
echo "  ‚Ä¢ Criar um branch de backup da vers√£o atual"
echo ""
read -p "Confirma o rollback? (y/N): " CONFIRM

if [[ ! "$CONFIRM" =~ ^[Yy]$ ]]; then
    log "Rollback cancelado."
    exit 0
fi

# Criar branch de backup da vers√£o atual
BACKUP_BRANCH="backup-v$CURRENT_VERSION-$(date +%Y%m%d-%H%M%S)"
log "Criando branch de backup: $BACKUP_BRANCH"
git checkout -b "$BACKUP_BRANCH"
git push origin "$BACKUP_BRANCH"

# Voltar para o branch principal
git checkout main

# Fazer stash das mudan√ßas n√£o commitadas
if [ -n "$(git status --porcelain)" ]; then
    log "Salvando mudan√ßas n√£o commitadas..."
    git stash push -m "Stash antes do rollback para v$ROLLBACK_VERSION"
fi

# Fazer checkout da vers√£o espec√≠fica
log "Fazendo checkout da vers√£o $ROLLBACK_VERSION..."
git checkout "$ROLLBACK_VERSION"

# Criar branch tempor√°rio para o rollback
ROLLBACK_BRANCH="rollback-v$ROLLBACK_VERSION"
git checkout -b "$ROLLBACK_BRANCH"

# Atualizar vers√£o no package.json
log "Atualizando vers√£o no package.json..."
npm version "$ROLLBACK_VERSION" --no-git-tag-version

# Atualizar documenta√ß√£o
log "Atualizando documenta√ß√£o..."
sed -i '' "s/^Vers√£o do Sistema.*$/Vers√£o do Sistema: \`$ROLLBACK_VERSION\`/" DOCUMENTACAO_DESENVOLVIMENTO.md
sed -i '' "s/^√öltima Atualiza√ß√£o.*$/√öltima Atualiza√ß√£o: \`$(date +%d\/%m\/%Y)\`/" DOCUMENTACAO_DESENVOLVIMENTO.md
sed -i '' "s/^Vers√£o.*$/Vers√£o: \`$ROLLBACK_VERSION\`/" CHECKPOINT_ESTADO_ATUAL.md
sed -i '' "s/^Data.*$/Data: \`$(date +%d\/%m\/%Y)\`/" CHECKPOINT_ESTADO_ATUAL.md
sed -i '' "s/^Vers√£o.*$/Vers√£o: \`$ROLLBACK_VERSION\`/" README.md
sed -i '' "s/^√öltima Atualiza√ß√£o.*$/√öltima Atualiza√ß√£o: \`$(date +%d\/%m\/%Y)\`/" README.md

# Commit das mudan√ßas
git add .
git commit -m "Rollback para vers√£o $ROLLBACK_VERSION"

# Fazer merge no branch principal
log "Fazendo merge no branch principal..."
git checkout main
git merge "$ROLLBACK_BRANCH" --no-ff -m "Rollback para vers√£o $ROLLBACK_VERSION"

# Remover branch tempor√°rio
git branch -d "$ROLLBACK_BRANCH"

# Push das mudan√ßas
log "Enviando mudan√ßas para o reposit√≥rio remoto..."
git push origin main

# Resumo final
echo ""
echo -e "${GREEN}‚úÖ Rollback para vers√£o $ROLLBACK_VERSION conclu√≠do!${NC}"
echo ""
echo -e "${BLUE}üìã Resumo das a√ß√µes:${NC}"
echo "  ‚Ä¢ Vers√£o atual: $CURRENT_VERSION ‚Üí $ROLLBACK_VERSION"
echo "  ‚Ä¢ Branch de backup criado: $BACKUP_BRANCH"
echo "  ‚Ä¢ Documenta√ß√£o atualizada"
echo "  ‚Ä¢ Rollback commitado e enviado"
echo ""
echo -e "${BLUE}üîÑ Como reverter o rollback:${NC}"
echo "  ‚Ä¢ git checkout $BACKUP_BRANCH"
echo "  ‚Ä¢ git checkout -b main-backup"
echo "  ‚Ä¢ git checkout main"
echo "  ‚Ä¢ git merge main-backup"
echo ""
echo -e "${BLUE}üìÅ Branches dispon√≠veis:${NC}"
echo "  ‚Ä¢ main (vers√£o atual: $ROLLBACK_VERSION)"
echo "  ‚Ä¢ $BACKUP_BRANCH (vers√£o anterior: $CURRENT_VERSION)"
echo ""
echo -e "${GREEN}üéâ Rollback conclu√≠do com sucesso!${NC}"
