import { Response, NextFunction } from 'express';
import { AuthRequest } from './auth';

/**
 * Middleware para validar acesso aos dados da empresa
 * Garante que usu√°rios s√≥ acessem dados de sua pr√≥pria empresa
 */
export const validateCompanyAccess = (req: AuthRequest, res: Response, next: NextFunction) => {
  try {
    console.log('üîê === VALIDA√á√ÉO DE ACESSO √Ä EMPRESA ===');
    console.log('üîê M√©todo:', req.method);
    console.log('üîê Path:', req.path);
    console.log('üîê Headers:', req.headers);
    
    const user = req.user;
    
    if (!user) {
      console.log('‚ùå Usu√°rio n√£o autenticado no middleware de valida√ß√£o de empresa');
      return res.status(401).json({
        success: false,
        message: 'Usu√°rio n√£o autenticado'
      });
    }

    console.log('üîê Usu√°rio autenticado:', {
      id: user.id_usuario,
      email: user.email,
      perfil: user.perfil,
      empresa: user.id_empresa
    });

    // Usu√°rios admin podem acessar dados de qualquer empresa
    if (user.perfil === 'admin') {
      console.log('‚úÖ Usu√°rio admin - acesso permitido a qualquer empresa');
      return next();
    }

    // Verificar se o usu√°rio tem empresa vinculada
    if (!user.id_empresa) {
      console.log('‚ùå Usu√°rio sem empresa vinculada');
      return res.status(403).json({
        success: false,
        message: 'Usu√°rio n√£o possui empresa vinculada'
      });
    }

    // Para uploads, permitir sempre (usu√°rio s√≥ pode fazer upload para sua pr√≥pria empresa)
    if (req.method === 'POST' && req.path === '/') {
      console.log('‚úÖ Upload autorizado para usu√°rio da empresa:', user.id_empresa);
      return next();
    }

    // Verificar se h√° tentativa de acessar dados de outra empresa
    const requestedCompanyId = req.params.companyId || req.body.companyId || req.query.companyId;
    
    if (requestedCompanyId && requestedCompanyId !== user.id_empresa) {
      console.log('‚ùå Tentativa de acesso a empresa n√£o autorizada:', {
        userCompany: user.id_empresa,
        requestedCompany: requestedCompanyId,
        userId: user.id_usuario,
        userEmail: user.email
      });
      
      return res.status(403).json({
        success: false,
        message: 'Acesso negado - voc√™ s√≥ pode acessar dados de sua pr√≥pria empresa'
      });
    }

    console.log('‚úÖ Acesso √† empresa validado com sucesso:', {
      userId: user.id_usuario,
      userCompany: user.id_empresa,
      requestedCompany: requestedCompanyId || 'pr√≥pria empresa',
      method: req.method,
      path: req.path
    });

    next();
  } catch (error) {
    console.error('‚ùå Erro no middleware de valida√ß√£o de empresa:', error);
    return res.status(500).json({
      success: false,
      message: 'Erro interno na valida√ß√£o de acesso'
    });
  }
};

/**
 * Middleware para validar se o usu√°rio pode acessar dados de um upload espec√≠fico
 */
export const validateUploadAccess = (req: AuthRequest, res: Response, next: NextFunction) => {
  try {
    const user = req.user;
    const uploadId = req.params.uploadId;
    
    if (!user) {
      return res.status(401).json({
        success: false,
        message: 'Usu√°rio n√£o autenticado'
      });
    }

    if (!uploadId) {
      return res.status(400).json({
        success: false,
        message: 'ID do upload √© obrigat√≥rio'
      });
    }

    // Usu√°rios admin podem acessar qualquer upload
    if (user.perfil === 'admin') {
      return next();
    }

    // Verificar se o upload pertence √† empresa do usu√°rio
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    
    prisma.upload.findFirst({
      where: { 
        id: uploadId,
        id_empresa: user.id_empresa
      },
      select: { id: true, id_empresa: true }
    }).then((upload: any) => {
      if (!upload) {
        console.log('‚ùå Tentativa de acesso a upload n√£o autorizado:', {
          uploadId,
          userCompany: user.id_empresa,
          userId: user.id_usuario
        });
        
        return res.status(403).json({
          success: false,
          message: 'Upload n√£o encontrado ou n√£o pertence √† sua empresa'
        });
      }

      console.log('‚úÖ Acesso ao upload validado:', {
        uploadId,
        userCompany: user.id_empresa,
        userId: user.id_usuario
      });

      next();
      return;
    }).catch((error: any) => {
      console.error('‚ùå Erro ao validar acesso ao upload:', error);
      return res.status(500).json({
        success: false,
        message: 'Erro interno na valida√ß√£o de acesso'
      });
    }).finally(() => {
      prisma.$disconnect();
    });

  } catch (error) {
    console.error('‚ùå Erro no middleware de valida√ß√£o de upload:', error);
    return res.status(500).json({
      success: false,
      message: 'Erro interno na valida√ß√£o de acesso'
    });
  }
};
