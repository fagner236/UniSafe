import { useState, useEffect } from 'react';
import { useData } from '@/contexts/DataContext';
import { Search, Download, Eye, Edit, Trash, Filter, ChevronUp, ChevronDown } from 'lucide-react';

const Employees = () => {
  const { processedData, hasData } = useData();
  const [searchTerm, setSearchTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [sortColumn, setSortColumn] = useState<string>('');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');

  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(value);
  };



  // Fun√ß√£o para formatar matr√≠cula no formato X.XXX.XXX-X
  const formatMatricula = (value: string | number): string => {
    if (!value) return '-';
    
    // Remove todos os caracteres n√£o num√©ricos
    const cleanValue = value.toString().replace(/\D/g, '');
    
    // Se tem menos de 8 d√≠gitos, retorna como est√°
    if (cleanValue.length < 8) return value.toString();
    
    // Formata no padr√£o X.XXX.XXX-X
    const formatted = cleanValue.replace(/^(\d{1})(\d{3})(\d{3})(\d{1})$/, '$1.$2.$3-$4');
    
    return formatted;
  };

  // Fun√ß√£o para formatar m√™s/ano no formato AAAAMM para MM/AAAA
  const formatMonthYear = (value: string | number): string => {
    if (!value) return '-';
    
    const valueStr = value.toString();
    
    // Verifica se √© um n√∫mero no formato AAAAMM (6 d√≠gitos)
    if (valueStr.length === 6 && /^\d{6}$/.test(valueStr)) {
      const year = valueStr.substring(0, 4);
      const month = valueStr.substring(4, 6);
      
      // Valida se o m√™s est√° entre 01 e 12
      const monthNum = parseInt(month, 10);
      if (monthNum >= 1 && monthNum <= 12) {
        return `${month}/${year}`;
      }
    }
    
    // Se n√£o for no formato esperado, retorna o valor original
    return valueStr;
  };

  // Fun√ß√£o para ordenar os dados
  const sortData = (data: any[], column: string, direction: 'asc' | 'desc') => {
    return [...data].sort((a, b) => {
      let valueA = (a as any)[column];
      let valueB = (b as any)[column];

      // Se os valores s√£o n√∫meros, compara numericamente
      if (typeof valueA === 'number' && typeof valueB === 'number') {
        return direction === 'asc' ? valueA - valueB : valueB - valueA;
      }

      // Se os valores s√£o strings, compara alfabeticamente
      if (typeof valueA === 'string' && typeof valueB === 'string') {
        const comparison = valueA.localeCompare(valueB, 'pt-BR', { numeric: true });
        return direction === 'asc' ? comparison : -comparison;
      }

      // Converte para string para compara√ß√£o
      const strA = String(valueA || '');
      const strB = String(valueB || '');
      const comparison = strA.localeCompare(strB, 'pt-BR', { numeric: true });
      return direction === 'asc' ? comparison : -comparison;
    });
  };

  // Fun√ß√£o para lidar com a ordena√ß√£o
  const handleSort = (column: string) => {
    if (sortColumn === column) {
      // Se clicar na mesma coluna, inverte a dire√ß√£o
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      // Se clicar em uma nova coluna, define como ascendente
      setSortColumn(column);
      setSortDirection('asc');
    }
    setCurrentPage(1); // Volta para a primeira p√°gina ao ordenar
  };

  // Filtra os funcion√°rios baseado no termo de busca
  const filteredEmployees = processedData?.employees.filter(emp => {
    if (!searchTerm) return true;
    
    const searchLower = searchTerm.toLowerCase();
    
    // Busca em todas as colunas do arquivo
    return processedData!.columns.some(column => {
      const value = (emp as any)[column];
      if (value) {
        return value.toString().toLowerCase().includes(searchLower);
      }
      return false;
    });
  }) || [];

  // Aplica ordena√ß√£o aos dados filtrados
  const sortedEmployees = sortColumn 
    ? sortData(filteredEmployees, sortColumn, sortDirection)
    : filteredEmployees;

  // L√≥gica de pagina√ß√£o
  const totalPages = Math.ceil(sortedEmployees.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentEmployees = sortedEmployees.slice(startIndex, endIndex);

  // Reset para primeira p√°gina quando mudar a busca ou ordena√ß√£o
  useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm, itemsPerPage, sortColumn, sortDirection]);

  if (!hasData) {
    return (
      <div className="space-y-6">
        <div>
          <h1 className="text-2xl font-bold" style={{ color: '#1d335b' }}>Filiados</h1>
          <p className="text-gray-600">Visualize todos os registros do arquivo carregado</p>
        </div>
        
        <div className="card">
          <div className="card-content">
            <div className="text-center py-12">
              <div className="mx-auto h-16 w-16 text-gray-400 mb-4">üìÑ</div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                Nenhum arquivo carregado
              </h3>
              <p className="text-gray-500 mb-6">
                Para visualizar os filiados, fa√ßa upload de um arquivo Excel ou CSV na p√°gina de Upload.
              </p>
              <a
                href="/upload"
                className="inline-flex items-center px-4 py-2 rounded-lg text-white font-medium transition-colors"
                style={{ backgroundColor: '#1d335b' }}
              >
                Ir para Upload
              </a>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold" style={{ color: '#1d335b' }}>Filiados</h1>
          <p className="text-gray-600">
            Visualizando {processedData!.summary.totalRecords.toLocaleString('pt-BR')} registros do arquivo: {processedData!.fileName}
          </p>
          <p className="text-sm text-gray-500 mt-1">
            Exibindo {startIndex + 1} a {Math.min(endIndex, sortedEmployees.length)} de {sortedEmployees.length.toLocaleString('pt-BR')} registros do arquivo
          </p>
        </div>
        <button 
          className="btn btn-primary"
          style={{ backgroundColor: '#1d335b' }}
        >
          <Download className="h-4 w-4 mr-2" />
          Exportar
        </button>
      </div>

      {/* Filtros */}
      <div className="card">
        <div className="card-content">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 items-end">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Buscar
              </label>
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  placeholder="Buscar em todas as colunas..."
                  className="input pl-10 h-10"
                />
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Itens por p√°gina
              </label>
              <select
                value={itemsPerPage}
                onChange={(e) => setItemsPerPage(Number(e.target.value))}
                className="input h-10"
              >
                <option value={10}>10</option>
                <option value={25}>25</option>
                <option value={50}>50</option>
                <option value={100}>100</option>
                <option value={200}>200</option>
                <option value={500}>500</option>
                <option value={1000}>1000</option>
              </select>
            </div>

            <div>
              <button
                onClick={() => setSearchTerm('')}
                className="btn btn-secondary w-full h-10"
                style={{ backgroundColor: '#c9504c', color: 'white' }}
              >
                <Filter className="h-4 w-4 mr-2" />
                Limpar Filtros
              </button>
            </div>

            <div>
              <div className="text-sm text-gray-600 bg-gray-50 px-3 py-2 rounded-md border border-gray-200 h-10 flex items-center">
                {sortedEmployees.length.toLocaleString('pt-BR')} registros encontrados
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Tabela de Filiados */}
      <div className="card">
        <div className="card-content">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  {/* Todas as colunas do arquivo */}
                  {processedData!.columns.map((column) => (
                    <th 
                      key={column} 
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 transition-colors"
                      onClick={() => handleSort(column)}
                      title={`Ordenar por ${column}`}
                    >
                      <div className="flex items-center justify-between">
                        <span>{column}</span>
                        <div className="flex flex-col ml-2">
                          {sortColumn === column ? (
                            sortDirection === 'asc' ? (
                              <ChevronUp className="h-3 w-3 text-red-600" />
                            ) : (
                              <ChevronDown className="h-3 w-3 text-red-600" />
                            )
                          ) : (
                            <div className="flex flex-col">
                              <ChevronUp className="h-3 w-3 text-gray-400" />
                              <ChevronDown className="h-3 w-3 text-gray-400" />
                            </div>
                          )}
                        </div>
                      </div>
                    </th>
                  ))}
                  
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    A√ß√µes
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {currentEmployees.length > 0 ? (
                  currentEmployees.map((employee, index) => (
                    <tr key={employee.id || index} className="hover:bg-gray-50">
                      {/* Todas as colunas do arquivo */}
                      {processedData!.columns.map((column) => {
                        const value = (employee as any)[column];
                        
                        // Formata√ß√£o especial para diferentes tipos de dados
                        let displayValue = value || '-';
                        
                        // Formata√ß√£o espec√≠fica para matr√≠cula - PRIORIDADE M√ÅXIMA
                        const matriculaColumns = [
                          'Matr√≠cula', 'MATRICULA', 'matricula', 'Matricula', 'Registration', 'REGISTRATION',
                          'Matricula', 'MATR√çCULA', 'matr√≠cula', 'Matr√≠cula', 'Registro', 'REGISTRO',
                          'Mat', 'MAT', 'mat', 'Reg', 'REG', 'reg'
                        ];
                        
                        // Formata√ß√£o espec√≠fica para campos de m√™s/ano - PRIORIDADE M√ÅXIMA
                        const monthYearColumns = [
                          'M√™s', 'MES', 'mes', 'Month', 'MONTH', 'month',
                          'M√™s/Ano', 'MES/ANO', 'mes/ano', 'Month/Year', 'MONTH/YEAR', 'month/year',
                          'Per√≠odo', 'PERIODO', 'periodo', 'Period', 'PERIOD', 'period',
                          'Refer√™ncia', 'REFERENCIA', 'referencia', 'Reference', 'REFERENCE', 'reference'
                        ];
                        
                        // Colunas que devem ser tratadas como texto puro (sem formata√ß√£o)
                        const textOnlyColumns = [
                          'Motivo Afastamento', 'MOTIVO AFASTAMENTO', 'motivo afastamento', 'MotivoAfastamento',
                          'Motivo', 'MOTIVO', 'motivo', 'Reason', 'REASON', 'reason',
                          'Descri√ß√£o', 'DESCRI√á√ÉO', 'descri√ß√£o', 'Description', 'DESCRIPTION', 'description',
                          'Observa√ß√£o', 'OBSERVA√á√ÉO', 'observa√ß√£o', 'Observation', 'OBSERVATION', 'observation',
                          'Coment√°rio', 'COMENT√ÅRIO', 'coment√°rio', 'Comment', 'COMMENT', 'comment',
                          'Nota', 'NOTA', 'nota', 'Note', 'NOTE', 'note',
                          'Status', 'STATUS', 'status', 'Situa√ß√£o', 'SITUA√á√ÉO', 'situa√ß√£o',
                          'Tipo', 'TIPO', 'tipo', 'Type', 'TYPE', 'type',
                          'Categoria', 'CATEGORIA', 'categoria', 'Category', 'CATEGORY', 'category',
                          'Lota√ß√£o', 'LOTA√á√ÉO', 'lota√ß√£o', 'Lotacao', 'LOTACAO', 'lotacao', 'Location', 'LOCATION', 'location',
                          'Setor', 'SETOR', 'setor', 'Sector', 'SECTOR', 'sector',
                          '√Årea', 'AREA', 'area', 'Area', 'AREA', 'area',
                          'Cargo', 'CARGO', 'cargo', 'Position', 'POSITION', 'position', 'Job', 'JOB', 'job',
                          'Fun√ß√£o', 'FUN√á√ÉO', 'fun√ß√£o', 'Function', 'FUNCTION', 'function',
                          'Departamento', 'DEPARTAMENTO', 'departamento', 'Department', 'DEPARTMENT', 'department',
                          'Divis√£o', 'DIVIS√ÉO', 'divis√£o', 'Division', 'DIVISION', 'division',
                          'Ger√™ncia', 'GER√äNCIA', 'ger√™ncia', 'Management', 'MANAGEMENT', 'management',
                          'Coordena√ß√£o', 'COORDENA√á√ÉO', 'coordena√ß√£o', 'Coordination', 'COORDINATION', 'coordination',
                          'Centro de Custo', 'CENTRO DE CUSTO', 'centro de custo', 'Cost Center', 'COST CENTER', 'cost center',
                          'C√≥digo', 'C√ìDIGO', 'c√≥digo', 'Code', 'CODE', 'code',
                          'Refer√™ncia', 'REFER√äNCIA', 'refer√™ncia', 'Reference', 'REFERENCE', 'reference',
                          'Identifica√ß√£o', 'IDENTIFICA√á√ÉO', 'identifica√ß√£o', 'Identification', 'IDENTIFICATION', 'identification',
                          'N√∫mero', 'N√öMERO', 'n√∫mero', 'Number', 'NUMBER', 'number',
                          'Sequencial', 'SEQUENCIAL', 'sequencial', 'Sequential', 'SEQUENTIAL', 'sequential',
                          'Ordem', 'ORDEM', 'ordem', 'Order', 'ORDER', 'order',
                          'Classifica√ß√£o', 'CLASSIFICA√á√ÉO', 'classifica√ß√£o', 'Classification', 'CLASSIFICATION', 'classification',
                          'Grupo', 'GRUPO', 'grupo', 'Group', 'GROUP', 'group',
                          'Subgrupo', 'SUBGRUPO', 'subgrupo', 'Subgroup', 'SUBGROUP', 'subgroup',
                          'Filia√ß√£o', 'FILIA√á√ÉO', 'filia√ß√£o', 'Affiliation', 'AFFILIATION', 'affiliation',
                          'V√≠nculo', 'V√çNCULO', 'v√≠nculo', 'Bond', 'BOND', 'bond',
                          'Contrato', 'CONTRATO', 'contrato', 'Contract', 'CONTRACT', 'contract',
                          'Modalidade', 'MODALIDADE', 'modalidade', 'Modality', 'MODALITY', 'modality',
                          'Regime', 'REGIME', 'regime', 'Regime', 'REGIME', 'regime',
                          'Jornada', 'JORNADA', 'jornada', 'Journey', 'JOURNEY', 'journey',
                          'Turno', 'TURNO', 'turno', 'Shift', 'SHIFT', 'shift',
                          'Hor√°rio', 'HOR√ÅRIO', 'hor√°rio', 'Schedule', 'SCHEDULE', 'schedule',
                          'Local', 'LOCAL', 'local', 'Place', 'PLACE', 'place',
                          'Endere√ßo', 'ENDERE√áO', 'endere√ßo', 'Address', 'ADDRESS', 'address',
                          'Bairro', 'BAIRRO', 'bairro', 'Neighborhood', 'NEIGHBORHOOD', 'neighborhood',
                          'Cidade', 'CIDADE', 'cidade', 'City', 'CITY', 'city',
                          'Estado', 'ESTADO', 'estado', 'State', 'STATE', 'state',
                          'CEP', 'cep', 'Zip', 'ZIP', 'zip', 'Postal', 'POSTAL', 'postal',
                          'Telefone', 'TELEFONE', 'telefone', 'Phone', 'PHONE', 'phone', 'Tel', 'TEL', 'tel',
                          'Celular', 'CELULAR', 'celular', 'Mobile', 'MOBILE', 'mobile', 'Cell', 'CELL', 'cell',
                          'Email', 'EMAIL', 'email', 'E-mail', 'E-MAIL', 'e-mail', 'Mail', 'MAIL', 'mail',
                          'CPF', 'cpf', 'Cpf', 'Document', 'DOCUMENT', 'document',
                          'RG', 'rg', 'Rg', 'Identity', 'IDENTITY', 'identity',
                          'PIS', 'pis', 'Pis', 'PIS', 'pis',
                          'CTPS', 'ctps', 'Ctps', 'CTPS', 'ctps',
                          'T√≠tulo', 'T√çTULO', 't√≠tulo', 'Title', 'TITLE', 'title',
                          'Zona', 'ZONA', 'zona', 'Zone', 'ZONE', 'zone',
                          'Se√ß√£o', 'SE√á√ÉO', 'se√ß√£o', 'Section', 'SECTION', 'section',
                          'Observa√ß√£o', 'OBSERVA√á√ÉO', 'observa√ß√£o', 'Observation', 'OBSERVATION', 'observation',
                          'Observa√ß√µes', 'OBSERVA√á√ïES', 'observa√ß√µes', 'Observations', 'OBSERVATIONS', 'observations'
                        ];
                        
                        if (monthYearColumns.some(col => column.toLowerCase().includes(col.toLowerCase()))) {
                          displayValue = formatMonthYear(value);
                        }
                        else if (matriculaColumns.includes(column)) {
                          displayValue = formatMatricula(value);
                        }
                        // Colunas de texto puro - PRIORIDADE ALTA
                        else if (textOnlyColumns.includes(column)) {
                          // Mant√©m o valor original sem formata√ß√£o
                          displayValue = value || '-';
                        }
                        // Formata√ß√£o espec√≠fica para campos de data
                        else {
                          const dateColumns = [
                            'Data Nascimento', 'DATA NASCIMENTO', 'data nascimento', 'DataNascimento', 'Birth Date', 'BIRTH DATE',
                            'Data Admiss√£o', 'DATA ADMISS√ÉO', 'data admiss√£o', 'DataAdmissao', 'Admission Date', 'ADMISSION DATE',
                            'Data Afastamento', 'DATA AFASTAMENTO', 'data afastamento', 'DataAfastamento', 'Leave Date', 'LEAVE DATE',
                            'Data', 'DATA', 'data', 'Date', 'DATE'
                          ];
                          if (dateColumns.includes(column)) {
                            try {
                              // Como as datas j√° foram convertidas durante o processamento, apenas exibe o valor
                              displayValue = value;
                            } catch (error) {
                              displayValue = value;
                            }
                          }
                          // Formata√ß√£o espec√≠fica para campos de valor/moeda
                          else {
                            const currencyColumns = [
                              'Valor Mensalidade', 'VALOR MENSALIDADE', 'valor mensalidade', 'ValorMensalidade',
                              'Mensalidade', 'MENSALIDADE', 'mensalidade',
                              'Valor', 'VALOR', 'valor', 'Price', 'PRICE', 'price',
                              'Sal√°rio', 'SALARIO', 'salario', 'Salary', 'SALARY', 'salary',
                              'Remunera√ß√£o', 'REMUNERACAO', 'remuneracao', 'Remuneration', 'REMUNERATION'
                            ];
                            
                            if (currencyColumns.includes(column)) {
                              const numValue = typeof value === 'number' ? value : Number(value.toString().replace(/[^\d,.-]/g, ''));
                              if (!isNaN(numValue)) {
                                displayValue = formatCurrency(numValue);
                              }
                            }
                            // Se o valor parece ser um n√∫mero (sal√°rio, etc.) - mas n√£o √© matr√≠cula nem data nem valor espec√≠fico
                            else if (typeof value === 'number' || (typeof value === 'string' && !isNaN(Number(value.replace(/[^\d.,]/g, ''))))) {
                              const numValue = typeof value === 'number' ? value : Number(value.replace(/[^\d.,]/g, ''));
                              
                              // Verifica se n√£o √© um campo de m√™s/ano (formato AAAAMM)
                              const isMonthYearField = monthYearColumns.some(col => column.toLowerCase().includes(col.toLowerCase()));
                              const isMonthYearValue = value.toString().length === 6 && /^\d{6}$/.test(value.toString());
                              
                              if (numValue > 1000 && !isMonthYearField && !isMonthYearValue) { // Provavelmente √© um sal√°rio
                                displayValue = formatCurrency(numValue);
                              }
                            }
                          }
                        }
                        
                        return (
                          <td key={column} className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {displayValue}
                          </td>
                        );
                      })}
                      
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end space-x-2">
                          <button 
                            className="text-blue-600 hover:text-blue-900"
                            title="Visualizar"
                          >
                            <Eye className="h-4 w-4" />
                          </button>
                          <button 
                            className="text-green-600 hover:text-green-900"
                            title="Editar"
                          >
                            <Edit className="h-4 w-4" />
                          </button>
                          <button 
                            className="text-red-600 hover:text-red-900"
                            title="Excluir"
                          >
                            <Trash className="h-4 w-4" />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan={processedData!.columns.length + 1} className="px-6 py-4 text-center text-gray-500">
                      Nenhum registro encontrado
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>

          {/* Controles de Pagina√ß√£o */}
          {sortedEmployees.length > 0 && (
            <div className="mt-6 flex items-center justify-between">
              <div className="text-sm text-gray-700">
                P√°gina {currentPage} de {totalPages} ({sortedEmployees.length.toLocaleString('pt-BR')} registros)
              </div>
              
              <div className="flex items-center space-x-2">
                {/* Bot√£o Primeira P√°gina */}
                <button
                  onClick={() => setCurrentPage(1)}
                  disabled={currentPage === 1}
                  className="px-3 py-1 text-sm border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                  title="Primeira p√°gina"
                >
                  ¬´¬´
                </button>
                
                {/* Bot√£o P√°gina Anterior */}
                <button
                  onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                  disabled={currentPage === 1}
                  className="px-3 py-1 text-sm border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                  title="P√°gina anterior"
                >
                  ¬´
                </button>
                
                {/* N√∫meros das p√°ginas */}
                <div className="flex items-center space-x-1">
                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                    let pageNumber;
                    if (totalPages <= 5) {
                      pageNumber = i + 1;
                    } else if (currentPage <= 3) {
                      pageNumber = i + 1;
                    } else if (currentPage >= totalPages - 2) {
                      pageNumber = totalPages - 4 + i;
                    } else {
                      pageNumber = currentPage - 2 + i;
                    }
                    
                    return (
                      <button
                        key={pageNumber}
                        onClick={() => setCurrentPage(pageNumber)}
                        className={`px-3 py-1 text-sm border rounded-md transition-colors ${
                          currentPage === pageNumber
                            ? 'bg-red-600 text-white border-red-600'
                            : 'border-gray-300 hover:bg-gray-50 hover:border-gray-400'
                        }`}
                        style={{
                          backgroundColor: currentPage === pageNumber ? '#c9504c' : undefined,
                          borderColor: currentPage === pageNumber ? '#c9504c' : undefined
                        }}
                      >
                        {pageNumber}
                      </button>
                    );
                  })}
                </div>
                
                {/* Bot√£o Pr√≥xima P√°gina */}
                <button
                  onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                  disabled={currentPage === totalPages}
                  className="px-3 py-1 text-sm border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                  title="Pr√≥xima p√°gina"
                >
                  ¬ª
                </button>
                
                {/* Bot√£o √öltima P√°gina */}
                <button
                  onClick={() => setCurrentPage(totalPages)}
                  disabled={currentPage === totalPages}
                  className="px-3 py-1 text-sm border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                  title="√öltima p√°gina"
                >
                  ¬ª¬ª
                </button>
              </div>
            </div>
          )}

          {/* Mensagem quando n√£o h√° resultados */}
          {filteredEmployees.length === 0 && (
            <div className="text-center py-8">
              <div className="mx-auto h-12 w-12 text-gray-400 mb-4">üîç</div>
              <h4 className="text-lg font-medium text-gray-900 mb-2">
                Nenhum resultado encontrado
              </h4>
              <p className="text-gray-500">
                Tente ajustar os filtros de busca para encontrar os registros desejados.
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Employees;
